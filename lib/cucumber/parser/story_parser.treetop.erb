grammar Story
  rule story
    header narrative scenario_nodes:scenario* {
      attr_accessor :file

      def eval(listener, phase)
        header.eval(listener, phase)
        narrative.eval(listener, phase)
        scenario_nodes.elements.each do |scenario_node|
          scenario_node.eval(listener, phase)
        end
      end
    }
  end

  rule header
    '<%= words['story'] %>:' space sentence_line {
      def eval(listener, phase)
        method = "story_#{phase}".to_sym
        listener.__send__(method, sentence_line.text_value.strip) if listener.respond_to?(method)
      end
    }
  end

  rule narrative
    (!scenario_start .)* {
      def eval(listener, phase)
        method = "narrative_#{phase}".to_sym
        listener.__send__(method, self.text_value) if listener.respond_to?(method)
      end
    }
  end

  rule scenario
    scenario_start sentence:sentence_line step_nodes:(step)* {
      def eval(listener, phase)
        method = "scenario_#{phase}".to_sym
        listener.__send__(method, sentence.text_value.strip) if listener.respond_to?(method)
        step_nodes.elements.each do |step_node|
          step_node.eval(listener, phase)
        end
      end
    }
  end
  
  rule scenario_start
    space '<%= words['scenario'] %>: '
  end

  rule step
    space step_type:('<%= words['given'] %>' / '<%= words['when'] %>' / '<%= words['then'] %>' / '<%= words['given_scenario'] %>') space sentence:sentence_line {
      def eval(listener, phase)
        method = "step_#{phase}".to_sym
        listener.__send__(method, step_type.text_value.strip, sentence.text_value.strip, input.line_of(interval.first)) if listener.respond_to?(method)
      end
    }
  end

  rule sentence_line
    (!eol .)* eol
  end

  rule space
    [ \n]*
  end

  rule eol
    "\n" / eof
  end
  
  rule eof
    !.
  end
end
